#ifndef ASCII_NUMBERS_H
# define ASCII_NUMBERS_H

//  █████    ██ ██████  ██████  ██   ██ ███████  █████  ███████  █████   █████  
// ██   ██" ███      ██      ██ ██   ██ ██      ██           ██ ██   ██ ██   ██ 
// ██   ██"  ██  █████   █████  ███████ ██████  ██████      ██   █████   ██████ 
// ██   ██"  ██ ██           ██      ██      ██ ██   ██    ██   ██   ██      ██ 
//  █████    ██ ███████ ██████       ██ ██████   █████    ██     █████   █████  

const char *asc_zero[5] = {
	" █████ ",
	"██   ██",
	"██   ██",
	"██   ██",
	" █████ "
};

const char *asc_one[5] = {
	" ██",
	"███",
	" ██",
	" ██",
	" ██"
};

const char *asc_two[5] = {
	"██████ ",
	"     ██",
	" █████ ",
	"██     ",
	"███████"
};

const char *asc_three[5] = {
	"██████ ",
	"     ██",
	" █████ ",
	"     ██",
	"██████ "
};

const char *asc_four[5] = {
	"██   ██",
	"██   ██",
	"███████",
	"     ██",
	"     ██"
};

const char *asc_five[5] = {
	"███████",
	"██     ",
	"██████ ",
	"     ██",
	"██████ "
};

const char *asc_six[5] = {
	" █████ ",
	"██     ",
	"██████ ",
	"██   ██",
	" █████ "
};
	
const char *asc_seven[5] = {
	"███████",
	"     ██",
	"    ██ ",
	"   ██  ",
	"  ██   "
};

const char *asc_eight[5] = {
	" █████ ",
	"██   ██",
	" █████ ",
	"██   ██",
	" █████ "
};

const char *asc_nine[5] = {
	" █████ ",
	"██   ██",
	" ██████",
	"     ██",
	" █████ "
};

const char *asc_numbers[18][5] = {
	{
		" █████ ",
		"██   ██",
		"██   ██",
		"██   ██",
		" █████ "
	},
	{
		" ██",
		"███",
		" ██",
		" ██",
		" ██"
	},
	{
		"██████ ",
		"     ██",
		" █████ ",
		"██     ",
		"███████"
	},
	{
		"██   ██",
		"██   ██",
		"███████",
		"     ██",
		"     ██"
	},
	{
		" █████ ",
		"██   ██",
		" █████ ",
		"██   ██",
		" █████ "
	},
	{
		" ██  █████ ",
		"███ ██     ",
		" ██ ██████ ",
		" ██ ██   ██",
		" ██  █████ "
	},
	{
		"██████  ██████ ",
		"     ██      ██",
		" █████   █████ ",
		"     ██ ██     ",
		"██████  ███████"
	},
	{
		" █████  ██   ██",
		"██      ██   ██",
		"██████  ███████",
		"██   ██      ██",
		" █████       ██"
	},
	{
		" ██ ██████   █████ ",
		"███      ██ ██   ██",
		" ██  █████   █████ ",
		" ██ ██      ██   ██",
		" ██ ███████  █████ "
	},
	{
		"██████  ███████  █████ ",
		"     ██ ██      ██     ",
		" █████  ██████  ██████ ",
		"██           ██ ██   ██",
		"███████ ██████   █████ "
	},
	{
		"███████  ██ ██████ ",
		"██      ███      ██",
		"██████   ██  █████ ",
		"     ██  ██ ██     ",
		"██████   ██ ███████"
	},
	{
		" ██  █████   ██████  ██   ██",
		"███ ██   ██       ██ ██   ██",
		" ██ ██   ██   █████  ███████",
		" ██ ██   ██  ██           ██",
		" ██  █████   ███████      ██"
	},
	{
		"██████   █████  ██   ██  █████ ",
		"     ██ ██   ██ ██   ██ ██   ██",
		" █████  ██   ██ ███████  █████ ",
		"██      ██   ██      ██ ██   ██",
		"███████  █████       ██  █████ "
	},
	{
		"██   ██  █████   █████   █████ ",
		"██   ██ ██   ██ ██   ██ ██     ",
		"███████ ██   ██  ██████ ██████ ",
		"     ██ ██   ██      ██ ██   ██",
		"     ██  █████   █████   █████ "
	},
	{
		" █████   ██  █████  ██████ ",
		"██   ██ ███ ██   ██      ██",
		" █████   ██  ██████  █████ ",
		"██   ██  ██      ██ ██     ",
		" █████   ██  █████  ███████"
	},
	{
		" ██  █████  ██████   █████  ██   ██",
		"███ ██           ██ ██   ██ ██   ██",
		" ██ ██████  ██████   █████  ███████",
		" ██ ██   ██      ██ ██   ██      ██",
		" ██  █████  ██████   █████       ██"
	},
	{
		"██████  ██████  ███████  █████   █████ ",
		"     ██      ██      ██ ██      ██   ██",
		" █████   █████      ██  ██████   █████ ",
		"     ██ ██         ██   ██   ██ ██   ██",
		"██████  ███████   ██     █████   █████ "
	},
	{
		" █████  ███████ ███████ ██████   █████ ",
		"██      ██      ██           ██ ██     ",
		"██████  ██████  ██████  ██████  ██████ ",
		"██   ██      ██      ██      ██ ██   ██",
		" █████  ██████  ██████  ██████   █████ "
	}
};

#endif
